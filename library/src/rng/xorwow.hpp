// Copyright (c) 2017-2023 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef ROCRAND_RNG_XORWOW_H_
#define ROCRAND_RNG_XORWOW_H_

#include <algorithm>
#include <hip/hip_runtime.h>

#include <rocrand/rocrand.h>

#include "common.hpp"
#include "config_types.hpp"
#include "device_engines.hpp"
#include "distributions.hpp"
#include "generator_type.hpp"

namespace rocrand_host {
namespace detail {

    typedef ::rocrand_device::xorwow_engine xorwow_device_engine;

    template<class T>
    struct generator_config_defaults<ROCRAND_RNG_PSEUDO_XORWOW, T>
    {
        const unsigned int threads = 256;
        const unsigned int blocks  = 512;
    };

    template<unsigned int BlockSize>
    ROCRAND_KERNEL
        __launch_bounds__(BlockSize) void init_engines_kernel(xorwow_device_engine* engines,
                                                              const unsigned int    start_engine_id,
                                                              unsigned long long    seed,
                                                              unsigned long long    offset)
    {
        const unsigned int engine_id = blockIdx.x * blockDim.x + threadIdx.x;
        engines[engine_id] = xorwow_device_engine(seed, engine_id, offset + (engine_id < start_engine_id ? 1 : 0));
    }

    template<unsigned int BlockSize, class T, class Distribution>
    ROCRAND_KERNEL
        __launch_bounds__(BlockSize) void generate_kernel(xorwow_device_engine* engines,
                                                          const unsigned int    start_engine_id,
                                                          T*                    data,
                                                          const size_t          n,
                                                          Distribution          distribution)
    {
        constexpr unsigned int input_width = Distribution::input_width;
        constexpr unsigned int output_width = Distribution::output_width;

        using vec_type = aligned_vec_type<T, output_width>;

        const unsigned int id     = blockIdx.x * blockDim.x + threadIdx.x;
        const unsigned int stride = gridDim.x * blockDim.x;

        // Stride MUST be a power of two
        const unsigned int engine_id = (id + start_engine_id) & (stride - 1);
        xorwow_device_engine engine = engines[engine_id];

        unsigned int input[input_width];
        T output[output_width];

        const uintptr_t uintptr = reinterpret_cast<uintptr_t>(data);
        const size_t misalignment =
            (
                output_width - uintptr / sizeof(T) % output_width
            ) % output_width;
        const unsigned int head_size = min(n, misalignment);
        const unsigned int tail_size = (n - head_size) % output_width;
        const size_t vec_n = (n - head_size) / output_width;

        vec_type * vec_data = reinterpret_cast<vec_type *>(data + misalignment);
        size_t index = id;
        while(index < vec_n)
        {
            for(unsigned int i = 0; i < input_width; i++)
            {
                input[i] = engine();
            }
            distribution(input, output);

            vec_data[index] = *reinterpret_cast<vec_type *>(output);
            // Next position
            index += stride;
        }

        // Check if we need to save head and tail.
        // Those numbers should be generated by the thread that would
        // save next vec_type.
        if(output_width > 1 && index == vec_n)
        {
            // If data is not aligned by sizeof(vec_type)
            if(head_size > 0)
            {
                for(unsigned int i = 0; i < input_width; i++)
                {
                    input[i] = engine();
                }
                distribution(input, output);

                for(unsigned int o = 0; o < output_width; o++)
                {
                    if(o < head_size)
                    {
                        data[o] = output[o];
                    }
                }
            }

            if(tail_size > 0)
            {
                for(unsigned int i = 0; i < input_width; i++)
                {
                    input[i] = engine();
                }
                distribution(input, output);

                for(unsigned int o = 0; o < output_width; o++)
                {
                    if(o < tail_size)
                    {
                        data[n - tail_size + o] = output[o];
                    }
                }
            }
        }

        // Save engine with its state
        engines[engine_id] = engine;
    }

    template<class T>
    using default_config_provider_xorwow = default_config_provider<ROCRAND_RNG_PSEUDO_XORWOW, T>;

} // end namespace detail
} // end namespace rocrand_host

// Unfortunately cannot be substituted by a variadic template lambda, because
// hipLaunchKernelGGL is a macro itself
#define ROCRAND_LAUNCH_KERNEL_FOR_ORDERING(ordering, kernel_name, ...)                 \
    if(rocrand_host::detail::is_ordering_dynamic(ordering))                            \
    {                                                                                  \
        using DeviceConfig = typename ConfigProvider<T>::dynamic_device_config;        \
        hipLaunchKernelGGL(HIP_KERNEL_NAME(kernel_name<DeviceConfig::config.threads>), \
                           __VA_ARGS__);                                               \
    }                                                                                  \
    else                                                                               \
    {                                                                                  \
        using DeviceConfig = typename ConfigProvider<T>::static_device_config;         \
        hipLaunchKernelGGL(HIP_KERNEL_NAME(kernel_name<DeviceConfig::config.threads>), \
                           __VA_ARGS__);                                               \
    }

template<template<class T> class ConfigProvider>
class rocrand_xorwow_template : public rocrand_generator_type<ROCRAND_RNG_PSEUDO_XORWOW>
{
public:
    using base_type = rocrand_generator_type<ROCRAND_RNG_PSEUDO_XORWOW>;
    using engine_type = ::rocrand_host::detail::xorwow_device_engine;

    rocrand_xorwow_template(unsigned long long seed   = 0,
                            unsigned long long offset = 0,
                            rocrand_ordering   order  = ROCRAND_ORDERING_PSEUDO_DEFAULT,
                            hipStream_t        stream = 0)
        : base_type(order, seed, offset, stream), m_engines_initialized(false)
    {}

    rocrand_xorwow_template(const rocrand_xorwow_template&) = delete;

    rocrand_xorwow_template(rocrand_xorwow_template&&) = delete;

    rocrand_xorwow_template& operator=(const rocrand_xorwow_template&&) = delete;

    rocrand_xorwow_template& operator=(rocrand_xorwow_template&&) = delete;

    /// Changes seed to \p seed and resets generator state.
    void set_seed(unsigned long long seed)
    {
        m_seed = seed;
        m_engines_initialized = false;
    }

    void set_offset(unsigned long long offset)
    {
        m_offset = offset;
        m_engines_initialized = false;
    }

    void set_order(rocrand_ordering order)
    {
        m_order               = order;
        m_engines_initialized = false;
    }

    void set_stream(hipStream_t stream)
    {
        base_type::set_stream(stream);
        m_engines_initialized = false;
    }

    rocrand_status init()
    {
        if (m_engines_initialized)
            return ROCRAND_STATUS_SUCCESS;

        rocrand_status status = m_state_dispatcher.init(
            m_stream,
            m_order,
            [&](auto&&                                        val,
                const rocrand_host::detail::generator_config& config,
                engine_state&                                 state)
            {
                using T                         = std::decay_t<decltype(val)>;
                const unsigned int engines_size = config.threads * config.blocks;
                state.m_start_engine_id         = m_offset % engines_size;

                const hipError_t error
                    = hipMalloc(&state.m_engines, sizeof(engine_type) * engines_size);
                if(error != hipSuccess)
                    return ROCRAND_STATUS_ALLOCATION_FAILED;

                ROCRAND_LAUNCH_KERNEL_FOR_ORDERING(m_order,
                                                   rocrand_host::detail::init_engines_kernel,
                                                   dim3(config.blocks),
                                                   dim3(config.threads),
                                                   0,
                                                   m_stream,
                                                   state.m_engines,
                                                   state.m_start_engine_id,
                                                   m_seed,
                                                   m_offset / engines_size);
                if(hipGetLastError() != hipSuccess)
                    return ROCRAND_STATUS_LAUNCH_FAILURE;

                return ROCRAND_STATUS_SUCCESS;
            });

        if(status != ROCRAND_STATUS_SUCCESS)
            return status;

        m_engines_initialized = true;

        return ROCRAND_STATUS_SUCCESS;
    }

    template<class T, class Distribution = uniform_distribution<T> >
    rocrand_status generate(T * data, size_t data_size,
                            Distribution distribution = Distribution())
    {
        rocrand_status status = init();
        if (status != ROCRAND_STATUS_SUCCESS)
            return status;

        rocrand_host::detail::generator_config config;
        hipError_t error = ConfigProvider<T>::host_config(m_stream, m_order, config);
        if(error != hipSuccess)
            return ROCRAND_STATUS_INTERNAL_ERROR;

        const auto& state = m_state_dispatcher.template get_state<T>();

        ROCRAND_LAUNCH_KERNEL_FOR_ORDERING(m_order,
                                           rocrand_host::detail::generate_kernel,
                                           dim3(config.blocks),
                                           dim3(config.threads),
                                           0,
                                           m_stream,
                                           state.m_engines,
                                           state.m_start_engine_id,
                                           data,
                                           data_size,
                                           distribution);

        // Check kernel status
        if(hipGetLastError() != hipSuccess)
            return ROCRAND_STATUS_LAUNCH_FAILURE;

        // Generating data_size values will use this many distributions
        const auto touched_engines =
            (data_size + Distribution::output_width - 1) /
            Distribution::output_width;

        m_state_dispatcher.template update_state<T>(
            [&](const rocrand_host::detail::generator_config& config, engine_state& state)
            {
                const unsigned int engines_size = config.threads * config.blocks;
                state.m_start_engine_id
                    = (state.m_start_engine_id + touched_engines) % engines_size;
            });

        return ROCRAND_STATUS_SUCCESS;
    }

    template<class T>
    rocrand_status generate_uniform(T * data, size_t data_size)
    {
        uniform_distribution<T> distribution;
        return generate(data, data_size, distribution);
    }

    template<class T>
    rocrand_status generate_normal(T * data, size_t data_size, T mean, T stddev)
    {
        normal_distribution<T> distribution(mean, stddev);
        return generate(data, data_size, distribution);
    }

    template<class T>
    rocrand_status generate_log_normal(T * data, size_t data_size, T mean, T stddev)
    {
        log_normal_distribution<T> distribution(mean, stddev);
        return generate(data, data_size, distribution);
    }

    rocrand_status generate_poisson(unsigned int * data, size_t data_size, double lambda)
    {
        try
        {
            m_poisson.set_lambda(lambda);
        }
        catch(rocrand_status status)
        {
            return status;
        }
        return generate(data, data_size, m_poisson.dis);
    }

private:
    using engine_state = rocrand_host::detail::common_engine_state<engine_type>;
    bool                                                                 m_engines_initialized;
    rocrand_host::detail::state_dispatcher<ConfigProvider, engine_state> m_state_dispatcher;

    // For caching of Poisson for consecutive generations with the same lambda
    poisson_distribution_manager<> m_poisson;

    // m_seed from base_type
    // m_offset from base_type
};

using rocrand_xorwow
    = rocrand_xorwow_template<rocrand_host::detail::default_config_provider_xorwow>;

#endif // ROCRAND_RNG_XORWOW_H_
